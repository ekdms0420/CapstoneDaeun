{
  "!name": "Obigo-WebAPI-Code-Hints",
  "!define": {
    "test": {
      "top": "number",
      "left": "number"
    },
    "keyvalue": {
      "name": "string",
      "value": "string"
    }
  },
  "navigator": {
    "device": {
      "bluetooth": {
        "!doc": "Bluetooth provides APIs to handle Bluetooth data and other relevant information.",
        "getDevicesOnService": {
          "!doc": "Returns a list of available Bluetooth devices and their properties"
        },
        "addDeviceAddedListener": {
          "!doc": "Returns the properties of an added Bluetooth device when successfully pairing with a Bluetooth device"
        },
        "removeDeviceAddedListener": {
          "!doc": "Removes a listener added by the addDeviceAddedListener() method"
        },
        "addDeviceRemovedListener": {
          "!doc": "Returns the device ID of a removed Bluetooth device when successfully unpairing with a Bluetooth device, or when the Bluetooth device is out of network coverage area"
        },
        "removeDeviceRemovedListener": {
          "!doc": "Removes a listener added by the addDeviceRemovedListener() method"
        },
        "addPropertiesChangedListener": {
          "!doc": "Returns the changed properties of a Bluetooth device. This method returns the changed properties of a given Bluetooth device instead of returning all its properties"
        },
        "removePropertiesChangedListener": {
          "!doc": "Removes a listener added by the addPropertiesChangedListener() method"
        }
      }
    },
    "lbs": {
      "address": {
        "!doc": "Address provides APIs to handle the LBS address data.",
        "getFromLocationName": {
          "!doc": "Returns an array of Address by a defined location name"
        },
        "getFromLocation": {
          "!doc": "Returns an array of Address to describe an area surrounded by a defined latitude and longitude"
        },
        "getFromCoordinates()": {
          "!doc": "Returns an array of Address to describe the named location, which is a place name. Specify a bounding box for the searched results by including the latitude and longitude of the lower left point and upper right point of the bounding box"
        }
      },
      "geolocation": {
        "!doc": "Geolocation provides APIs to handle the geographic data of service users.",
        "getLastCountryCode": {
          "!doc": "Returns the country code of the latest known location"
        },
        "addProximityAlertListener": {
          "!doc": "Adds a proximity alert for the location given by the position (latitude, longitude) and the given radius. When entering or exiting the area surrounding the location is detected, callback is fired."
        },
        "removeProximityAlertListener": {
          "!doc": "Removes a listener added by the addProximityAlertListener() method"
        },
        "getLastKnownLocation": {
          "!doc": "Returns a location indicating the data from the last known location fix obtained from the given provider (e.g. GPS)"
        },
        "getCurrentPosition": {
          "!doc": "Returns the geolocation data"
        },
        "addCurrentPositionListener": {
          "!doc": "Returns the geoposition data whenever it changes"
        },
        "removeCurrentPositionListener": {
          "!doc": "Removes a listener added by the addCurrentPositionListener() method"
        }
      },
      "gpsStatus": {
        "!doc": "GpsStatus provides APIs to handle the GPS relevant information.",
        "getReceiverChannelCount": {
          "!doc": "Returns the total number of channels received from GPS"
        },
        "getUsedSatelliteCount": {
          "!doc": "Returns the total number of satellites used by a GPS receiver"
        },
        "getVisibleSatelliteCount": {
          "!doc": "Returns the total number of satellites visible to a GPS receiver"
        },
        "getReceivedSatelliteCount": {
          "!doc": "Returns the total number of satellites received from a GPS receiver"
        }
      }
    },
    "navigation": {
      "!doc": "Navigation provides an API category that handles navigation map information.",
      "route": {
        "!doc": "Route provides APIs to manage route search function.",
        "getDestination": {
          "!doc": "Returns the current destination"
        },
        "getWaypoint": {
          "!doc": "Returns current waypoints on the route"
        },
        "getRoute": {
          "!doc": "Returns current route information"
        },
        "getGuidanceStatus": {
          "!doc": "Returns true if route guidance is in process, else false"
        },
        "setDestination": {
          "!doc": "Sets a destination"
        },
        "setWaypoint": {
          "!doc": "Sets waypoints to add to destination. This method can be called when setting destination or route guidance is in process."
        },
        "startGuidance": {
          "!doc": "Starts route guidance"
        },
        "getAvailable": {
          "!doc": "Returns true if navigation is available, else false"
        }
      },
      "tmc": {
        "!doc": "TMC provides APIs to handle road traffic flow information.",
        "getTMCState": {
          "!doc": "Returns the current TMC status"
        },
        "setTMCState": {
          "!doc": "Sets the current TMC status"
        }
      }
    },
    "pim": {
      "!doc": "PIM provides an API category that manages personal information.",
      "contact": {
        "!doc": "Contact provides APIs to manage contact information.",
        "getContact": {
          "!doc": "Returns contact information"
        },
        "getSource": {
          "!doc": "Returns the list of available sources and their properties. The available sources refer to devices registered to the current system."
        },
        "addSourceAddedListener": {
          "!doc": "Returns newly added source information after calling the addSourceAddedListener() method. This method fires an event when a new source is added to a system."
        },
        "removeSourceAddedListener": {
          "!doc": "Removes the listener added by the addSourceAddedListener() method"
        },
        "addSourceRemovedListener": {
          "!doc": "Returns the ID of a device that is removed from a system"
        },
        "removeSourceRemovedListener": {
          "!doc": "Removes the listener added by the addSourceRemovedListener() method"
        }
      }
    },
    "preferences": {
      "!doc": "Preference provides an API category that manages system preferences.",
      "setting": {
        "!doc": "The Setting provides APIs to check and change the setting values of system preferences.",
        "getCurrentSetting": {
          "!doc": "Returns the current values of requested settings"
        },
        "setCurrentSetting": {
          "!doc": "Changes setting values that are currently configured for audio components and settings. This method is used to configure writeable settings."
        }
      }
    },
    "speech": {
      "!doc": "Speech provides an API category that handles voice information.",
      "tts": {
        "!doc": "The TTS provides APIs to read out texts by voice.",
        "speak": {
          "!doc": "Plays a TTS speak function"
        },
        "cancel": {
          "!doc": "Cancels TTS that plays a speak function"
        },
        "getState": {
          "!doc": "Returns the current state of TTS"
        },
        "setPreferences": {
          "!doc": "Sets tts preference data to change current setting values"
        },
        "addTtsStateListener": {
          "!doc": "Returns the changed state of TTS"
        },
        "removeTtsStateListener": {
          "!doc": "Removes the listener added by the addTtsStateListener() method"
        }
      }
    },
    "telephony": {
      "!doc": "The callMgr provides APIs to handle telephone calls.",
      "callMgr": {
        "!doc": "The callMgr provides APIs to handle telephone calls.",
        "makeCall": {
          "!doc": "Makes a phone call"
        },
        "hangup": {
          "!doc": "Terminates an ongoing call"
        },
        "getDeviceProperties": {
          "!doc": "Returns the properties of a connected phone device"
        },
        "getHistory": {
          "!doc": "Returns the call history of a connected phone device"
        },
        "addCallStateListener": {
          "!doc": "Returns the changed call state"
        },
        "removeCallStateListener": {
          "!doc": "Removes the listener added by the removeCallStateListener() method"
        },
        "addDevicePropertiesChangeListener": {
          "!doc": "Returns the changed status of a phone device"
        },
        "removeDevicePropertiesChangeListener": {
          "!doc": "ves the listener added by the addDevicePropertiesChangeListener() method"
        }
      },
      "smsMgr": {
        "!doc": "The smsMgr provides APIs to handle the Short Message Service (SMS) of telephones.",
        "sendSms": {
          "!doc": "Sends SMS text messages"
        },
        "getSms": {
          "!doc": "Returns received SMS text messages"
        },
        "addSentListener": {
          "!doc": "Returns the SMS data information when SMS text messages are sent"
        },
        "removeSentListener": {
          "!doc": "Removes the listener added by the addSentListener() method"
        },
        "addReceivedListener": {
          "!doc": "Returns the SMS data information when SMS text messages are received"
        },
        "removeReceivedListener": {
          "!doc": "Removes the listener added by the addReceivedListener() method"
        },
        "addDeliverySuccessListener": {
          "!doc": "Returns the SMS delivery data information when SMS text messages are sent successfully"
        },
        "removeDeliverySuccessListener": {
          "!doc": "Removes the listener added by the addDeliverySuccessListener() method"
        },
        "addDeliveryErrorListener": {
          "!doc": "Returns the SMS delivery data information when SMS text messages fail to send"
        },
        "removeDeliveryErrorListener": {
          "!doc": "the listener added by the addDeliveryErrorListener() method"
        }
      }
    },
    "tuner": {
      "!doc": "Tuner provides API categories that handle Radio Data System (RDS) data.",
      "radio": {
        "!doc": "The Radio provides APIs to handle radio information.",
        "tune": {
          "!doc": "Tunes the number of steps up or down to increase or decrease a frequency"
        },
        "setFrequency": {
          "!doc": "Tunes a radio to a selected frequency"
        },
        "seek": {
          "!doc": "Searches the current frequency upward or downward until the radio finds a station"
        },
        "cancelSeek": {
          "!doc": "Stops a seek operation, which searches upward or downward from the current frequency until a radio finds a station"
        },
        "scan": {
          "!doc": "Starts a scanning process on the radio to search for an available station on a current band"
        },
        "cancelScan": {
          "!doc": "Stops a scanning operation on the radio to search for an available station on a current band"
        },
        "setPreset": {
          "!doc": "Sets preset data"
        },
        "getPreset": {
          "!doc": "Returns the list to the preset"
        },
        "setBand": {
          "!doc": "Returns the list to the preset"
        },
        "getFrequencyByLatestBand": {
          "!doc": "Returns to the last tuned frequency of a selected band"
        },
        "getStation": {
          "!doc": "Returns a currently tuned station"
        },
        "setPreferences": {
          "!doc": "Sets radio preference data to change current setting values"
        },
        "getPreferences": {
          "!doc": "Returns the current preference data"
        },
        "getStationsByBand": {
          "!doc": "Returns the radio station information from a band"
        },
        "addSeekStatusListener": {
          "!doc": "Returns the changed seek status"
        },
        "removeSeekStatusListener": {
          "!doc": "Removes the listener added by the addSeekStatusListener() method"
        },
        "addStationListChangedListener": {
          "!doc": "Returns the changed state of a radio station list"
        },
        "removeStationListChangedListener": {
          "!doc": "Removes the listener added by the addStationListChangedListener() method"
        },
        "addSearchStatusListener": {
          "!doc": "Returns the changed status of search"
        },
        "removeSearchStatusListener": {
          "!doc": "Remove the listener added by the addSearchStatusListener() method"
        }
      }
    },
    "vehicle": {
      "vehicleSpeed": {
        "!doc": "The VehicleSpeed interface represents vehicle speed information."
      },
      "wheelSpeed": {
        "!doc": "The WheelSpeed interface represents wheel speed information."
      },
      "engineSpeed": {
        "!doc": "The EngineSpeed interface represents engine speed information."
      },
      "powertrainTorque": {
        "!doc": "The PowertrainTorque interface represents powertrain torque."
      },
      "throttlePosition": {
        "!doc": "The ThrottlePosition represents position of the throttle."
      },
      "tripMeters": {
        "!doc": "The Trip interface represents trip meter."
      },
      "transmission": {
        "!doc": "The Transmission interface represents the current transmission gear and mode."
      },
      "cruiseControlStatus": {
        "!doc": "The CruiseControlStatus interface represents cruise control settings."
      },
      "lightStatus": {
        "!doc": "The LightStatus interface represents exterior light statuses."
      },
      "fuel": {
        "!doc": "The Fuel interface represents vehicle fuel status."
      },
      "engineOil": {
        "!doc": "The EngineOil interface represents engine oil status."
      },
      "engineCoolant": {
        "!doc": "The EngineCoolant represents values related to engine coolant."
      },
      "steeringWheel": {
        "!doc": "The SteeringWheel represents steering wheel data."
      },
      "yawRate": {
        "!doc": "The YawRate represents vehicle yaw rate."
      },
      "brakeOperation": {
        "!doc": "The BrakeOperation represents vehicle brake operation."
      },
      "nightMode": {
        "!doc": "The NightMode interface provides information about whether or not it is night time. NightMode is an abstract data type that may combine several other data types such as exterior brightness, time of day, sunrise/sunset, etc to determine whether or not it is night time. Typical usage is to change the UI theme to a darker theme during the night."
      },
      "advisor": {},
      "autoPhase": {},
      "clutchSwitch": {},
      "effectiveTorque": {},
      "engineControl": {},
      "engineStatus": {},
      "fluentDriving": {},
      "globalWarning": {},
      "gsi": {},
      "powerTrain": {},
      "meterADAC": {},
      "rangeIndication": {},
      "tireTorque": {},
      "vehicleState": {},
      "water": {},
      "batteryStatus": {
        "!doc": "The BatteryStatus interface provides information about the state of a vehicles battery."
      },
      "tire": {
        "!doc": "The Tire interface provides information about the state of a vehicles tires."
      },
      "diagnostic": {
        "!doc": "The Diagnostic interface represents Diagnostic interface to malfunction indicator light information."
      },
      "longitudinalAccel": {},
      "overhaul": {},
      "driveMode": {
        "!doc": "The DriveMode interface provides or sets information about a vehicles drive mode."
      },
      "ecoScores": {},
      "antilockBrakingSystem": {
        "!doc": "The AntilockBrakingSystem interface provides status of ABS(Antilock Braking System) status and setting."
      },
      "airbagStatus": {
        "!doc": "The AirbagStatus interface provides the current status of airbags in each zones of the vehicle."
      },
      "door": {
        "!doc": "The Door interface provides the current status of doors in each zones of the vehicle."
      },
      "seat": {
        "!doc": "The Seat interface provides the current occupant information and seatbelt status of a seat in different zones of the vehicle."
      },
      "temperature": {
        "!doc": "The Temperature interface provides information about the current temperature of outside or inside vehicle."
      },
      "wiperStatus": {
        "!doc": "The WiperStatus interface represents the status of wiper operation."
      },
      "neutralContact": {},
      "rawSensor": {},
      "carConfiguration": {
        "getEngine": {
          "!doc": "Return data about engine, fuel, and petrol configuration"
        },
        "getVariantSelection": {
          "!doc": "Represents the variant selection which is sent as response from automotive domain"
        },
        "getIdentification": {
          "!doc": "Return data about identification"
        },
        "getSystemConfiguration": {
          "!doc": "Return data about system configuration"
        },
        "getRegionConfiguration": {
          "!doc": "Return data about region configuration"
        },
        "getRestrictionConfiguration": {
          "!doc": "Returns an object which has data regarding the restriction configuration"
        },
        "getTunerConfiguration": {
          "!doc": "Return data about tuner configuration"
        },
        "getDisplayConfiguration": {
          "!doc": "Return data about display configuration"
        },
        "getSteeringWheel": {
          "!doc": "Return data about steering wheel configuration such as position"
        }
      }
    },
    "media": {
      "audio": {
        "!doc": "Audio provides APIs to handle the Audio data.",
        "setSongInfo": {
          "!doc": "It offers to set song information from web media player to automotive domain."
        },
        "addFreeImageListener": {
          "!doc": "Returns path of the image when it is consumed"
        },
        "removeFreeImageListener": {
          "!doc": "Removes a listener added by the addFreeImageListener() method"
        }
      }
    }
  }
}