 /**
  *
  *  @module directives/obg-focus
  *
  *  @example
  *  <obg-button v-obg-focus="{scene:1, order: 1}" @focusin="handler" @focusout="handler" />
  *  <obg-button v-obg-focus="{scene:1, order: 2}" />
 */
import {focusInstance} from '../features/focus'

export default {
  inserted (el, {value = {scene: 0, zone: 2, skip: false, subSection: false, sectionDirection: 'left', tabNumber: null}}, vnode) {
    if (value.skip) return
    if (value.subSection) {
      focusInstance._addSubSection(el, value.sectionDirection, vnode)
    } else {
      focusInstance._addComponent(el, value, vnode)
    }
  },
  componentUpdated (el, {value = {scene: 0, zone: 2, skip: false}}) {
    if (value.skip) {
      // focusInstance._setComponentFocusOff()
      // focusInstance.nextOrder()
      return
    }
    if (!(el.disabled || el.classList.contains('disabled') || el.classList.contains('disable')) && focusInstance._componentFocusMode && !focusInstance._componentControlMode) {
      // && !(el.dataset.type && el.dataset.type === 'focus-control-able')
      focusInstance._setComponentFocusOn()
    }
  },
  unbind (el, {value = {scene: 0, zone: 2, subSection: false, sectionDirection: 'left', tabNumber: null}, modifiers}) {
    if (value.skip) return
    if (value.subSection) {
      focusInstance._removeSubSection(el, value.sectionDirection)
    } else {
      focusInstance._removeComponent(el, value)
    }
  }
  /**
   * triggered when focus in to component
   *
   * @event focusin
   */

  /**
   * triggered when focus out from component
   *
   * @event focusout
   */
}
