/*
 * 앱간 통신을 이용해 launcher 로부터 공통(crach, OOM) 메시지를 받는 라이브러리
 */
import popup from '../components/popup'
const AIC_NOTIFICATION = 'from-launcher-notification'
let instance
class CommonPopup {
  constructor () {
    if (!instance) {
      instance = this
      this.init()
    }
    return instance
  }
  init () {
    if (window.applicationFramework) {
      this.isShown = true
      let appManager = window.applicationFramework.applicationManager
      let application = appManager.getOwnerApplication(window.document)
      let model = window.applicationFramework.util.getDeviceModel()
      let isActive = application.isPopupActive()

      application.registerMessageListener(AIC_NOTIFICATION)
      if (isActive) {
        this.toggleBlurClass(true)
      }
      application.addEventListener('ApplicationShown', () => {
        this.toggleBlurClass(window.applicationFramework.applicationManager.getOwnerApplication(window.document).isPopupActive())
        this.isShown = true
      })
      application.addEventListener('ApplicationHidden', () => {
        this.isShown = false
      })
      application.addEventListener('ApplicationMessage', (msg, origin) => {
        let filterName = (origin.indexOf('filter-name=') > -1) ? origin.split('filter-name=')[1] : ''
        if (filterName === AIC_NOTIFICATION && this.isShown) {
          msg = JSON.parse(msg)
          if (msg.type === 'popup') {
            if (model === 'nissan9p') {
              const okIconPath = application.getCommonLibraryPath() + '/icon/ok.png'
              application.requestPopup(2, (model === 'nissan9p') ? '' : msg.title, msg.content, [okIconPath])
            } else {
              var shownPopup = popup.show({
                title: (model === 'nissan9p') ? '' : msg.title,
                width: (model === 'nissan9p') ? 1000 : 500,
                content: msg.content,
                buttons: [{
                  label: msg.button,
                  onClick: () => {
                    shownPopup.close()
                  }
                }]
              })
            }
          } else {
            this.toggleBlurClass(msg.isActive)
          }
        }
      }, false)
    }
  }
  toggleBlurClass (flag) {
    const $app = document.querySelector('#app')
    const blurTarget = document.querySelectorAll('.obg-popover, .close-button-context-menu, .overlay .popup, .obg-dialog')
    if (blurTarget.length > 0) {
      blurTarget.forEach($target => {
        if (flag) {
          $target.classList.add('obg-filter-blur')
        } else {
          $target.classList.remove('obg-filter-blur')
        }
      })
    } else {
      if (flag) {
        $app.classList.add('obg-filter-blur')
      } else {
        $app.classList.remove('obg-filter-blur')
      }
    }
  }
}
export default new CommonPopup()
/*
export function install (_Vue) {
  var commonPopup = new CommonPopup() // eslint-disable-line
  return instance
}
*/
