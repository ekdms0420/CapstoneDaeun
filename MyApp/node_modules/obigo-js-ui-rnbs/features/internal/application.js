/**
 * @module application
 * @desc application object has information and status of running web application.<br/>
 * this object can control app status and communicate with Obigo AF by events.
 * @example
 * var appManager = window.applicationFramework.applicationManager
 * var application = appManager.getOwnerApplication(window.document)
 */

class application{


  /**
   *
   * @event ServiceConnected
   * @summary When connected to a service type application
   * @param {string} serviceId
   * @param {integer} result
   * @param {integer} errorCode
   * @example
   * application.addEventListener('ServiceConnected', (serviceId, result, errorCode) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ServiceDisconnected
   * @summary When disconnected to a service type application
   * @param {string} serviceId
   * @param {integer} reason
   * @example
   * application.addEventListener('ServiceDisconnected', (serviceId, reason) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event SuggestionActionHandled
   * @summary call getSuggestionAction() method to read and process action data and call event to show the application
   * @example
   * application.addEventListener('SuggestionActionHandled', () => {
   *   // todo
   * })
   *
   */

  /**
   * @event ApplicationActivated
   * @summary when application has focus
   * @example
   * application.addEventListener('ApplicationActivated', () => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event AplicationHidden
   * @summary when application hidden to screen
   * @example
   * application.addEventListener('ApplicationHidden', () => {
   *   // todo
   * })
   */

  /**
   *
   * @event AplicationShown
   * @summary when application shown to screen
   * @example
   * application.addEventListener('ApplicationShown', () => {
   *   // todo
   * })
   */

  /**
   *
   * @event ApplicationSuspended
   * @summary when web launcher enters suspend state
   * @param {integer} mode  - mode:0 suspend app<br/>mode:1 suspend screen
   * @example
   * application.addEventListener('ApplicationSuspended', (mode) => {
   *   // todo
   * })
   */

  /**
   *
   * @event ApplicationResumed
   * @summary when web launcher enters resume state
   * @example
   * application.addEventListener('ApplicationResumed', () => {
   *   // todo
   * })
   */

  /**
   *
   * @event ApplicationDeactivated
   * @summary when application lose focus
   * @example
   * application.addEventListener('ApplicationDeactivated', () => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event ApplicationMessage
   * @summary register message listener to receive message from postMessage function
   * @param {string} message  - receive message
   * @param {string} targetOrigin   - filter-name
   * @param {BinderDescription } sender   - BinderDescriptor to bind sender application
   * @example
   * application.addEventListener('ApplicationMessage', (message, targetOrigin, sender) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event AmbientColorChanged
   * @summary listen to the change of ambient colors
   * @param {string} color - changed color
   * @example
   * application.addEventListener('AmbientColorChanged', (color) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event LanguageChanged
   * @summary listen to the change of current language
   * @param {string} lang - changed language
   * @example
   * application.addEventListener('LanguageChanged', (lang) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event CommandWidgetUpdate
   * @summary widget update
   * @param {integer} commandType
   * @param {string} widgetId
   * @example
   * application.addEventListener('CommandWidgetUpdate', (commandType, widgetId) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event PopupButtonReleased
   * @summary listen to the user action of popup
   * @param {integer} buttonIdx - pressed button index
   * @example
   * application.addEventListener('PopupButtonReleased', (buttonIdx) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event ChangedLockoutStatus
   * @summary return lockout state<br/>0=not driving<br/>1=driving
   * @param {integer} status - lockout status
   * @example
   * application.addEventListener('ChangedLockoutStatus', (status) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event UpdatedExpirationDate
   * @summary when the Expiration date is updated
   * @param {integer} expirationDate
   * @example
   * application.addEventListener('UpdatedExpirationDate', (expirationDate) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event UpdatedPrivacyModeStatus
   * @summary when the Privacy mode is updated
   * @param {boolean} status
   * @example
   * application.addEventListener('UpdatedPrivacyModeStatus', (status) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event UpdatedConfigurations
   * @summary when the Configurations is updated
   * @param {string} configurations
   * @example
   * application.addEventListener('UpdatedConfigurations', (configurations) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event NetworkStateChanged
   * @summary whenever the network state is changed
   * @param {integer} state
   * @example
   * application.addEventListener('NetworkStateChanged', (state) => {
   *   // todo
   * })
   *
   */

  /**
   * @function addEventListener
   * @summary add event to application.<br/>
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * application.addEventListener('EventName', () => {
   *   // todo
   * })
   *
   */
  addEventListener (evt, callback) {
  }

  /**
   * @function removeEventListener
   * @summary remove event to application
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * application.removeEventListener('EventName', eventHandler)
   *
   */
  removeEventListener (evt, callback) {
  }

  /**
   * @function getLockoutStatus
   * @summary return lockout status
   * @return {integer}   - if lockout, return 1 else return 0
   * @example
   * application.getLockoutStatus()
   *
   */
	getLockoutStatus () {
  }

  /**
   * @function getConfigurations
   * @summary return configurations
   * @return {string}   - Configurations
   * @example
   * application.getConfigurations()
   *
   */
	getConfigurations () {
  }

  /**
   * @function home
   * @summary go to native home
   * @example
   * application.home()
   *
   */
  home () {
  }

  /**
   * @function main
   * @summary go to web launcher main
   * @example
   * application.main()
   *
   */
  main () {
  }

  /**
   * @function back
   * @summary go application back
   * @example
   * application.back()
   *
   */
  back () {
  }

  /**
   * @function show
   * @summary show application to screen.<br/>but does not change application layer order
   * @example
   * application.show()
   *
   */
  show () {
  }

  /**
   * @function hide
   * @summary hide application to screen
   * @example
   * application.hide()
   *
   */
  hide () {
  }

  /**
   * @function fullscreen
   * @summary convert application to fullscreen application
   * @example
   * application.fullscreen()
   *
   */
  fullscreen () {
  }

  /**
   * @function getDescriptor
   * @summary return widget descriptor object
   * @return {object}   - WidgetDescriptor
   * @example
   * var widgetDescriptor = application.getDescriptor()
   *
   */
  getDescriptor () {
  }

  /**
   * @function createApplication
   * @summary create a new application, add it in application tree and return the object
   * @param {string} uri
   * @param {boolean} createChild
   * @return {object}   - Application
   * @example
   * var app = application.createApplication(uri, createChild)
   *
   */
  createApplication (uri, createChild) {
  }

  /**
   * @function destroyApplication
   * @summary destroy application and remove from application tree and deallocate resource. <br/>
   * if exist child application, destroy child application too. <br/>
   * window also removed.
   * @example
   * var destroyedApp = application.destroyApplication()
   *
   */
  destroyApplication () {
  }

  /**
   * @function startWidget
   * @summary run the widget designated wd
   * @param {WidgetDescriptor} wd   - designated widget
   * @param {boolean} createChild
   * @param {string} intent   - ""
   * @example
   * var wd = application.getDescriptor()
   * var app = application.startWidget(wd, createChild, intent)
   *
   */
  startWidget (wd, createChild, intent) {
  }

  /**
   * @function stopWidget
   * @summary terminate the designated widget
   * @param {WidgetDescriptor} wd   - designated widget
   * @example
   * var wd = application.getDescriptor()
   * application.stopWidget(wd)
   *
   */
  stopWidget (wd) {
  }

  /**
   * @function postMessage
   * @summary send message to other applications
   * @param {string} message - message to send
   * @param {string} targetOrigin - text string that combination with widget id of receiver application and filter name
   * @param {BinderDescription} replyTarget - BinderDescriptor to reply message
   * @example
   * var widgetId = application.getDescripor().id
   * var targetOrigin = widgetId + '?filter-name=hello'
   * application.postMessage('message to send', targetOrigin, null)
   *
   */
  postMessage (message, targetOrigin, replyTarget) {
  }

  /**
   * @function registerMessageListener
   * @summary register filter name to receive message from postMessage function
   * @param {string} filterName - filter name for message receive
   * @example
   * var filterName = 'hello'
   * application.registerMessageListener(filterName)
   *
   */
  registerMessageListener(filterName) {
  }

  /**
   * @function unregisterMessageListener
   * @summary unregister filter name
   * @param {string} filterName - filter name for message receive
   * @example
   * var filterName = 'hello'
   * application.unregisterMessageListener(filterName)
   *
   */
  unregisterMessageListener(filterName) {
  }

  /**
   * @function requestNativeScreen
   * @summary to a open system screen
   * @param {integer} type - 1: screen none<br/>2: video player screen<br/>3: picture viewer screen<br/>4: eco drive screen
   * @example
   * var type = 2  // video player screen
   * application.requestNativeScreen(type)
   *
   */
  requestNativeScreen (type) {
  }

  /**
   * @function getStatusBarTitle
   * @summary to get a status bar title
   * @return {string} title - status bar title
   * @example
   * var nowTitle = application.getStatusBarTitle()
   *
   */
  getStatusBarTitle () {
  }

  /**
   * @function setStatusBarTitle
   * @summary to set a text title to the status bar
   * @param {string} title - title to set
   * @example
   * var newTitle = 'Hello World!'
   * application.setStatusBarTitle(newTitle)
   *
   */
  setStatusBarTitle (title) {
  }

  /**
   * @function requestPopup
   * @summary to open popup to native
   * @param {integer} type - popup type.<br/>0: no popup<br/>1: toast popup<br/>2: center popup<br/>
   * @param {string} title - popup title
   * @param {string} content  - popup content
   * @param {array} button - label of popup buttons
   * @example
   * const application = window.applicationFramework.applicationManager.getOwnerApplication(document)
   * const commonPath = application.getCommonLibraryPath()
   * const btnParam = []
   * btnParam.push(commonPath + '/icon/yes.png')
   * btnParam.push(commonPath + '/icon/no.png')
   * application.requestPopup(2, 'Popup title', 'Popup body message', btnParam)
   *
   */
  requestPopup (type, title, content, buttons) {
  }

  /**
   * @function isPopupActive
   * @summary to check popup is open
   * @return {boolean} open - if popup open, return true.
   * @example
   * var isPopupShown = application.isPopupActive()
   *
   */
  isPopupActive () {
  }

  /**
   * @function 	setPopupActivationStatus
   * @summary inform the activate or deactivate status of webapp popup as native domain.
   * @param {boolean} active - activate/deactivate status
   * @example
   * application.setPopupActivationStatus(active)
   *
   */
  setPopupActivationStatus (active) {
  }

  /**
   * @function 	enterCriticalSection
   * @summary to prevent the app is killed when out of memory occurs.
   * @example
   * application.enterCriticalSection()
   *
   */
  enterCriticalSection () {
  }

  /**
   * @function 	leaveCriticalSection
   * @summary to release the mode entered enterCriticalSection.
   * @example
   * application.leaveCriticalSection()
   *
   */
  leaveCriticalSection () {
  }

  /**
   * @function getCommonLibraryPath
   * @summary to get common javascript library path
   * @return {string} path - common library path
   * @example
   * var commonLibPath = application.getCommonLibraryPath()
   *
   */
  getCommonLibraryPath () {
  }

  /**
   * @function getStorageLocation
   * @summary to get storage path by storage(location) type
   * @param {integer} locationType - storage type.<br/>1: userPrivage, applicationPrivate<br/>2: userPrivage,applicationShared<br/>3: userShared,applicationPrivate<br/>4: userShared,applicationShared<br/>
   * @return {string} location - storage path
   * @example
   * var storageLocation = application.getStorageLocation(locationType)
   *
   */
  getStorageLocation (locationType) {
  }

  /**
   * @function getSuggestionAction
   * @summary return SuggestionMessage instance that contains action data from suggestion & notification manager. If application is implemented suggestion and notification, application should call this function in "onSuggestionActionHandled" event handler or when application is launched.
   * @return {SuggestionMessage}   - SuggestionMessage instance
   * @example
   * application.getSuggestionAction()
   *
   */
	getSuggestionAction() {
  }

  /**
   * @function addNewSuggestionMessage
   * @summary To send a new suggetion & notification message from application
   * @param {SuggestionMessage} message - suggestion message
   * @param {function} callback - callback function to get result
   * @example
   * var suggestionMessage = new SuggestionMessage()
   * application.addNewSuggestionMessage(suggestionMessage, function (result) {
   * })
   *
   */
  addNewSuggestionMessage (message, callback) {
  }

  /**
   * @function updateSuggestionMessage
   * @summary To update suggestion & notification in application. result will be returned by parameter of callback function.
   * @param {SuggestionMessage} message - suggestion message
   * @param {function} callback - callback function to get result
   * @example
   * var suggestionMessage = new SuggestionMessage()
   * application.updateSuggestionMessage(suggestionMessage, function (result) {
   * })
   *
   */
  updateSuggestionMessage (message, callback) {
  }

  /**
   * @function removeSuggestionMessage
   * @summary To remove suggestion & notification.
   * @param {string} application - application id
   * @param {string} domain - suggestion & notification domain
   * @param {string} indent - suggestion & notification indent
   * @param {number} subId - sub id
   * @param {function} callback - callback function to get result
   * @example
   * var appId = 'appid'
   * var domain = 'AppManager'
   * var indent = 'indent'
   * var subId = 0
   * application.removeSuggestionMessage(appId, domain, indent, subId, function (result) {
   * })
   *
   */
  removeSuggestionMessage (application, domain, indent, subId, callback) {
  }

  /**
   * @function announceSupportedActions
   * @summary announce all action can used in application.
   * @param {string} application - application id
   * @param {array } supportedActions - supported actions list
   * @param {function} callback - callback function to get result
   * @example
   * var appId = 'appid'
   * var actionList = [
   *  // action items
   * ]
   * application.announceSupportedActions (appId, actionList, function (result) {
   * })
   *
   */
  announceSupportedActions (application, domain, indent, subId, callback) {
  }

  /**
   * @function setSuggestionActionStatus
   * @summary application should announce current status after receive action data.
   * @param {string} application - application id
   * @param {string} domain - suggestion & notification domain
   * @param {string} indent - suggestion & notification indent
   * @param {integer} subId - sub id
   * @param {string} actionType - action status
   * @param {integer} actionStatus - callback function to get result
   * @example
   * // INVALID = 0
   * // STARTED = 1
   * // ONGOING = 2
   * // SUCCESS = 3
   * // FAILED = 4
   * application.setSuggestionActionStatus(application, domain, indent, subId, actionType, actionStatus)
   *
   */
  setSuggestionActionStatus (application, domain, indent, subId, actionType, actionStatus) {
  }

  // properties ////////////////////////////
  constructor(){
    /**
     * @member visiable
     * @type boolean
     * @summary application's visible/hidden status
     * @example
     * var isVisible = application.visible
     *
     */
    this.visible;

    /**
     * @member suggestionMuteState
     * @type integer
     * @summary mute state of suggestion
     * @example
     * var state = application.suggestionMuteState
     *
     */
    this.suggestionMuteState;

    /**
     * @member suggestionSpeechState
     * @type integer
     * @summary speach state of suggestion
     * @example
     * var state = application.suggestionSpeechState
     *
     */
    this.suggestionSpeechState;

    /**
     * @member suggestionStatus
     * @type integer
     * @summary current suggestion state<br/>UNKNOWN = 0
     * <br/>AVAILABLE = 1<br/>NOT_AVAILABLE = 2<br/>BLOCKED = 3
     * @example
     * var suggestionState = application.suggestionStatus
     *
     */
    this.suggestionStatus;

    /**
     * @member type
     * @type integer
     * @summary type of application. <br/>
     * gadget or fullscreen app. <br/>
     * 1: fullscreen app mode<br/>2: gedget mode
     * @example
     * var appType = application.type
     *
     */
    this.type;

    /**
     * @member onLine
     * @type boolean
     * @summary current network state
     * network connected: true<br/>
     * network disconnected: false<br/>
     * @example
     * var onLineState = application.onLine
     *
     */
    this.onLine;


  }

}

