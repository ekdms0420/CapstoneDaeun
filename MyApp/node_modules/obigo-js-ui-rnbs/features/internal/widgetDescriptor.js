/**
 * @module widgetDescriptor
 * @desc widgetDescriptor object has information about application widget
 * @example
 * var appManager = window.applicationFramework.applicationManager
 * var application = appManager.getOwnerApplication(window.document)
 * var widgetDescriptor = application.getDescriptor()
 */

class widgetDescriptor{

    /**
     * @function getFeatureParams
     * @summary get feature parameters as JSON string format.
     * @param {string} feature
     * @return {string} featureParams - feature Parameters
     * @example
     * var featureParams = widgetDescriptor.getFeatureParams(feature)
     *
     */
    getFeatureParams (feature) {
    }

    /**
     * @function getMemoryUsage
     * @summary return memory size used in the widget
     * @return {integer} memoryUsage - memory size (kb)
     * @example
     * var memoryUsage = widgetDescriptor.getMemoryUsage()
     *
     */
    getMemoryUsage () {
    }

    /**
     * @function getStorageUsage
     * @summary return storage size used in the widget
     * @return {integer} storageUsage - storage size (kb)
     * @example
     * var storageUsage = widgetDescriptor.getStorageUsage()
     *
     */
    getStorageUsage () {
    }

    /**
     * @function getWidgetName
     * @summary return widget name corresponding to the language
     * @param {string} language
     * @return {string} widgetName    - widget name
     * @example
     * var widgetName = widgetDescriptor.getWidgetName(language)
     *
     */
    getWidgetName (language) {
    }

    // properties ////////////////////////////
  constructor(){
    /**
     * @member id
     * @type string
     * @summary get widget id
     * @example
     * var wdId = widgetDescriptor.id
     *
     */
    this.id;

    /**
     * @member version
     * @type string
     * @summary get widget version
     * @example
     * var ver = widgetDescriptor.version
     *
     */
    this.version;

    /**
     * @member nameList
     * @type string
     * @summary application name information as JSON string format
     * @example
     * var nameInfo = widgetDescriptor.nameList
     *
     */
    this.nameList;

    /**
     * @member shortNameList
     * @type string
     * @summary application short name information as JSON string format
     * @example
     * var shortNameInfo = widgetDescriptor.shortNameList
     *
     */
    this.shortNameList;

    /**
     * @member authorName
     * @type string
     * @summary get author name of widget
     * @example
     * var authorNameInfo = widgetDescriptor.authorName
     *
     */
    this.authorName;

    /**
     * @member authorEmail
     * @type string
     * @summary get author email of widget
     * @example
     * var authorEmailInfo = widgetDescriptor.authorEmail
     *
     */
    this.authorEmail;

    /**
     * @member authorHref
     * @type string
     * @summary get author href of widget
     * @example
     * var authorHrefInfo = widgetDescriptor.authorHref
     *
     */
    this.authorHref;

    /**
     * @member license
     * @type string
     * @summary get license of widget
     * @example
     * var licenseInfo = widgetDescriptor.license
     *
     */
    this.license;

    /**
     * @member licenseHref
     * @type string
     * @summary get license href of widget
     * @example
     * var licenseHrefInfo = widgetDescriptor.licenseHref
     *
     */
    this.licenseHref;

    /**
     * @member iconSrcPath
     * @type string
     * @summary icon file name of application
     * @example
     * var icon = widgetDescriptor.iconSrcPath
     *
     */
    this.iconSrcPath;

    /**
     * @member description
     * @type string
     * @summary description of widget
     * @example
     * var desc = widgetDescriptor.description
     *
     */
    this.description;

    /**
     * @member group
     * @type string
     * @summary widget group
     * @example
     * var groupInfo = widgetDescriptor.group
     *
     */
    this.group;

    /**
     * @member featureList
     * @type string
     * @summary application feature information as JSON string format
     * @example
     * var featureListInfo = widgetDescriptor.featureList
     *
     */
    this.featureList;

    /**
     * @member installTime
     * @type string
     * @summary widget installed time
     * @example
     * var installTimeInfo = widgetDescriptor.installTime
     *
     */
    this.installTime;

    /**
     * @member drivingRestriction
     * @type string
     * @summary driving-restriction value of widget
     * @example
     * var drValue = widgetDescriptor.drivingRestriction
     *
     */
    this.drivingRestriction;

    /**
     * @member killable
     * @type boolean
     * @summary whether killable application or not
     * @example
     * var kiilAvailable = widgetDescriptor.killable
     *
     */
    this.killable;

    /**
     * @member autostart
     * @type boolean
     * @summary whether auto startable application or not
     * @example
     * var autoStartable = widgetDescriptor.autostart
     *
     */
    this.autostart;

    /**
     * @member running
     * @type boolean
     * @summary if widget is running return true
     * @example
     * var widgetRunning = widgetDescriptor.running
     *
     */
    this.running;

    /**
     * @member reserved
     * @type boolean
     * @summary if reserved is true, user can't delete application
     * @example
     * var isReserved = widgetDescriptor.reserved
     *
     */
    this.reserved;

    /**
     * @member service
     * @type boolean
     * @summary service type value
     * @example
     * var widgetService = widgetDescriptor.service
     *
     */
    this.service;

    /**
     * @member iconWidth
     * @type integer
     * @summary width of icon
     * @example
     * var iconWid = widgetDescriptor.iconWidth
     *
     */
    this.iconWidth;

    /**
     * @member iconHeight
     * @type integer
     * @summary height of icon
     * @example
     * var iconHei = widgetDescriptor.iconHeight
     *
     */
    this.iconHeight;

    /**
     * @member widgetWidth
     * @type integer
     * @summary width of widget
     * @example
     * var widgetWid = widgetDescriptor.widgetWidth
     *
     */
    this.widgetWidth;

    /**
     * @member widgetHeight
     * @type integer
     * @summary height of widget
     * @example
     * var widgetHei = widgetDescriptor.widgetHeight
     *
     */
    this.widgetHeight;

    /**
     * @member activationDate
     * @type string
     * @summary activated date information
     * @example
     * var activationDateInfo = widgetDescriptor.activationDate
     *
     */
    this.activationDate;

    /**
     * @member expirationDate
     * @type string
     * @summary expiration date information
     * @example
     * var expirationDateInfo = widgetDescriptor.expirationDate
     *
     */
    this.expirationDate;

    /**
     * @member subscriptionStatus
     * @type integer
     * @summary subscription status information
     * @example
     * var subscriptionState = widgetDescriptor.subscriptionStatus
     *
     */
    this.subscriptionStatus;

    /**
     * @member installedPackageSize
     * @type integer
     * @summary installed widget size
     * @example
     * var packageSize = widgetDescriptor.installedPackageSize
     *
     */
    this.installedPackageSize;
  }


}

