/**
 * @module applicationManager
 * @desc applicationManager is a internal object that provided by Obigo AF.
 * <br/> it is a child object of applicationFramework object.
 * @example
 * var appManager = window.applicationFramework.applicationManager
 */
/*
 * applicationManager �� ����� ���������� �����ϴ� ���� ��ü�̴�.
 * �� ��ü�� applicationFramework�� ���� ��ü�̴�.
 * */

class applicationManager{

   /**
   *
   * @event ClearDataDone
   * @summary inform result of clearData()
   * @param {WidgetDescriptor} wd   - same value as wd called in clearData function
   * @param {integer} result  - CLEAR_DATA_FAILED, CLEAR_DATA_COMPLETED
   * @example
   * appManager.addEventListener('ClearDataDone', (wd, result) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event LowMemory
   * @summary When ApplicationFramework is OOM status
   * @param {string} message
   * @example
   * appManager.addEventListener('LowMemory', (message) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event MemoryUsage
   * @summary Memory usage is delivered
   * @param {integer} usage
   * @example
   * appManager.addEventListener('MemoryUsage', (usage) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationAccessed
   * @summary when access request occurs in application
   * @param {WidgetDescriptor } wd  - widget descriptor
   * @param {integer} permission  - PERMISSION_DENY=1<br/> PERMISSION_PROMPT_ONESHOT=2<br/> PERMISSION_PROMPT_SESSION=3<br/> PERMISSION_PROMPT_BLANKET=4<br/> PERMISSION_PROMPT_PERMIT=5
   * @example
   * appManager.addEventListener('ApplicationAccessed', (wd, permission) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event ApplicationAPIVersionInvalidated
   * @summary if the version information of feature is checked and is not available when loading the application
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @example
   * appManager.addEventListener('ApplicationAPIVersionInvalidated', (wd) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationValidated
   * @summary When application is signature validated
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @example
   * appManager.addEventListener('ApplicationValidated', (wd) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationInvalidated
   * @summary When application fails signature validatation
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @example
   * appManager.addEventListener('ApplicationInvalidated', (wd) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event ApplicationExpired
   * @summary When application is expired
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @example
   * appManager.addEventListener('ApplicationExpired', (wd) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationLoaded
   * @summary When loadiong of application is compeleted
   * @param {Application} appl  - application object
   * @example
   * appManager.addEventListener('ApplicationLoaded', (appl) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationUnloaded
   * @summary When unloadiong of application is compeleted
   * @param {Application} appl  - application object
   * @example
   * appManager.addEventListener('ApplicationUnloaded', (appl) => {
   *   // todo
   * })
   *
   */

  /**
   *
   * @event ApplicationLoadError
   * @summary When error occurs during the loading process of application
   * @param {Application} appl  - application object
   * @example
   * appManager.addEventListener('ApplicationLoadError', (appl) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationCrashed
   * @summary When application terminate in unexpectly case
   * @param {Application} appl  - application object
   * @example
   * appManager.addEventListener('ApplicationCrashed', (appl) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationCrashed
   * @summary When the application is unexpectedly terminated
   * @param {Application} appl  - application object
   * @example
   * appManager.addEventListener('ApplicationCrashed', (appl) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationRequiredUpdate
   * @summary When required update state of the application is changed
   * @param {Application} applicaion  - application object
   * @param {integer} state  - required update state
   * @example
   * appManager.addEventListener('ApplicationRequiredUpdate', (application, state) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event LatestUpdate
   * @summary When the upgradeable application exists
   * @param {UpdateDescriptorCollection} list
   * @param {integer} state  - update state
   * @example
   * appManager.addEventListener('LatestUpdate', (list, state) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event RecoveredApplications
   * @summary Send a message to inform that problem of the browser is resolved
   * @param {string} msg  - inform message
   * @param {integer} state
   * @example
   * appManager.addEventListener('RecoveredApplications', (state, msg) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationMain
   * @summary when application.main() method is used
   * @param {Application} app  - application object
   * @example
   * appManager.addEventListener('ApplicationMain', (app) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event ApplicationBack
   * @summary when application.back() method is used
   * @param {Application} app  - application object
   * @example
   * appManager.addEventListener('ApplicationBack', (app) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event WidgetInstallation
   * @summary when progress state changes or error occurs during the widget installation
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @param {integer} state
   * @param {integer} reason
   * @example
   * appManager.addEventListener('WidgetInstallation', (wd, state, reason) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event WidgetUninstallation
   * @summary when progress state changes or error occurs during the widget uninstallation
   * @param {WidgetDescriptor} wd  - widget descriptor
   * @param {integer} state
   * @example
   * appManager.addEventListener('WidgetUninstallation', (wd, state) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event UpdatedSubscriptionStatus
   * @summary when subsciption status is updated
   * @param {WidgetDescriptorCollection} wdc  - widget descriptor collection
   * @example
   * appManager.addEventListener('UpdatedSubscriptionStatus', (wdc) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event StorageUsageAlert
   * @summary when aviable storage is less than 10%.
   * @param {integer} availableStorage  - percentage
   * @example
   * appManager.addEventListener('StorageUsageAlert', (availableStorage) => {
   *   // todo
   * })
   *
   */

   /**
   *
   * @event PopupActivationStatusChanged
   * @summary when popup is activated or deactivated
   * @param {integer} activate  - 1: popup activate, 0: popup deactivate
   * @example
   * appManager.addEventListener('PopupActivationStatusChanged', (activate) => {
   *   // todo
   * })
   *
   */

  /**
   * @function getOwnerapplication
   * @summary return application object
   * @param {Document} doc  - current document object
   * @return {Application}  - Application object
   * @example
   * var application = appManager.getOwnerApplication(widnow.document)
   *
   */
  getOwnerApplication(doc){
  }

  /**
   * @function addEventListener
   * @summary add event to appicationManager
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * appManager.addEventListener('EventName', () => {
   *   // todo
   * })
   *
   */
  addEventListener (evt, callback) {
  }

  /**
   * @function removeEventListener
   * @summary remove event to appicationManager
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * appManager.removeEventListener('EventName', eventHandler)
   *
   */
  removeEventListener (evt, callback) {
  }

  /**
   * @function getChildApplications
   * @summary return the child application collection of specific application
   * @param {Application} application  - specific application
   * @return {ApplicationCollection}  - child application collection
   * @example
   * var application = appManager.getOwnerApplication(window.document)
   * var childApplications = appManager.getChildApplications(application)
   *
   */
  getChildApplications(application){
  }

  /**
   * @function getRunningApplications
   * @summary return the application collection currently running at run time.
   * @param {integer} applicationType
   * @return {ApplicationCollection}  - application collection
   * @example
   * var runningApplications = appManager.getRunningApplications(applicationType)
   *
   */
  getRunningApplications(applicationType){
  }

  /**
   * @function installWidget
   * @summary install specific widget
   * @param {string} uri   - uri of widget
   * @example
   * appManager.installWidget(uri)
   *
   */
  installWidget(uri){
  }

  /**
   * @function uninstallWidget
   * @summary delete the widget
   * @param {WidgetDescriptor} wd   - widgetDescriptor object
   * @example
   * appManager.uninstallWidge(wd)
   *
   */
  uninstallWidget(wd){
  }

  /**
   * @function checkLatestApplications
   * @summary examine the Application Package(.wgt) below the specified folder to select which packages should be updated.
   * @example
   * appManager.checkLatestApplications()
   *
   */
  checkLatestApplications(){
  }

  /**
   * @function getCurrentUserId
   * @summary return current user id
   * @return {string}  - current user id
   * @example
   * var currentUserId = appManager.getCurrentUserId()
   *
   */
  getCurrentUserId(){
  }

  /**
   * @function getCurrentUserName
   * @summary return current user name
   * @return {string}  - current user name
   * @example
   * var currentUserName = appManager.getCurrentUserName()
   *
   */
  getCurrentUserName(){
  }

  /**
   * @function getCurrentUserToken
   * @summary return current user token
   * @return {string}  - current user token
   * @example
   * var currentUserId = appManager.getCurrentUserToken()
   *
   */
  getCurrentUserToken(){
  }

  /**
   * @function getTopmostApplication
   * @summary return the top-level Visible Application
   * @return {Application}  - the top-level Visible Application
   * @example
   * var topApplication = appManager.getTopmostApplication()
   *
   */
  getTopmostApplication(){
  }

  /**
   * @function getUsedMemory
   * @summary return memory size that Application Framework currently use (KByte)
   * @return {integer}  - memory size
   * @example
   * var usedMemory = appManager.getUsedMemory()
   *
   */
  getUsedMemory(){
  }

  /**
   * @function getMaxMemoryUsage
   * @summary return maximum memory size that can be ussed in Application Framework (KByte)
   * @return {integer}  - memory size
   * @example
   * var maxMemoryUsage = appManager.getMaxMemoryUsage()
   *
   */
  getMaxMemoryUsage(){
  }

  /**
   * @function getPrivacyModeStatus
   * @summary return privacy mode status
   * @return {boolean}  - privacy mode status
   * @example
   * var privacyModeStatus = appManager.getPrivacyModeStatus()
   *
   */
  getPrivacyModeStatus(){
  }

  /**
   * @function setInstallWidgetMaxCount
   * @summary set maximum widget number that can be displayed in the launcher
   * @param {integer} maxCount   - max widget number
   * @example
   * appManager.setInstallWidgetMaxCount(maxCount)
   *
   */
  setInstallWidgetMaxCount(maxCount){
  }

  /**
   * @function clearData
   * @summary delete private data
   * @param {WidgetDescriptor} wd   - widget descriptor
   * @example
   * var application = appManager.getOwnerApplication(window.document)
   * var wd = application.getDescriptor()
   * appManager.clearData(wd)
   *
   */
  clearData(wd){
  }

  // properties ////////////////////////////
  constructor(){
    /**
     * @member widgets
     * @type WidgetDescriptorCollection
     * @summary collection of installed widget information
     * @example
     * var wds = appManager.widgets
     *
     */
    this.widgets;
  }


}

