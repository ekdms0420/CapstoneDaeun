/**
 * @module applicationFramework
 * @desc applicationFramework object has information of current Obigo AF/Apps framework.
 * <br/> it is a internal object that is injected by Obigo browser in window object
 * @example 
 * var appFrm = window.applicationFramework
 */

class applicationFramework {

  /**
   *
   * @event UpdatedConnectivityActivationStatus
   * @summary listen to the update of connectivity and services status
   * @param {boolean} status - updated connectivity and services status
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.addEventListener('UpdatedConnectivityActivationStatus', (status) => {
   *    // todo
   * })
   * 
   */

   /**
   * @function addEventListener
   * @summary add event to applicationFramework
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * appFrm.addEventListener('EventName', () => {
   *   // todo
   * })
   *
   */
  addEventListener (evt, callback) {
  }

  /**
   * @function removeEventListener
   * @summary remove event to applicationFramework
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   * @example
   * appFrm.removeEventListener('EventName', eventHandler)
   *
   */
  removeEventListener (evt, callback) {
  }

  /**
   * @function getVersion
   * @summary return application framework(Obigo AF) version
   * @return {string}  - framework version
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.getVersion()
   * 
   */
  getVersion () {
  }

  /**
   * @function getResourceVersion
   * @summary return application framework resource(webapp packages) version
   * @return {string}  - framework resource version
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.getResourceVersion()
   */
  getResourceVersion () {
  }

  /**
   * @function getWebLauncherVersion
   * @summary return web launcher version
   * @return {string}  - web launcher version
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.getwebLauncherVersion()
   */
  getWebLauncherVersion () {
  }

  /**
   * @function setEngineerMode
   * @summary enter the developer mode and test the operation of the API
   * @param {integer} mode - developer mode
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.setEngineerMode(mode)
   */
  setEngineerMode (mode) {
  }

  /**
   * @function getConnectivityActivationStatus
   * @summary return connectivity and services status
   * @return {boolean}  - connectivity and services status
   * @example
   * var appFrm = window.applicationFramework
   * appFrm.getConnectivityActivationStatus()
   */
  getConnectivityActivationStatus () {
  }

  constructor () {
    /**
     * @member applicationManager
     * @type ApplicationManager
     * @summary ApplicationManager object
     * @example
     * var appFrm = window.applicationFramework
     * var appMgr = appFrm.applicationManager
     *
     */
    this.applicationManager;

    /**
     * @member downloadManager
     * @type DownloadManager
     * @summary DownloadManage object
     * @example
     * var appFrm = window.applicationFramework
     * var downloadMgr = appFrm.downloadManager
     *
     */
    this.downloadManager;

    /**
     * @member util
     * @type Util
     * @summary Util object
     * @example
     * var appFrm = window.applicationFramework
     * var ut = appFrm.util
     *
     */
    this.util;

  }
}

