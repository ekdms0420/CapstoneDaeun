/**
 * @module lockout
 * @desc lockout module create path map and control
 */
import appManager from './appManager'
// import LockoutDirective from '../directives/obg-lockout'

const POPUP_TYPE = {NO_POPUP: 0, TOAST_POPUP: 1, CENTER_POPUP: 2}
const LOCKOUT_STATUS = {NOT_DRIVING: 0, DRIVING: 1}
const APP_TYPE = { 'GADGET': 'gadget', 'WIDGET': 'widget' }
const BASIC_PATH = '/'

export default class Lockout {
  constructor () {
    this.appManager = appManager

    this._pathMap = new Map()
    this._appType = ''
    this._binded = false
    this._currentPath = BASIC_PATH
    this._lockoutStatus = 'NONE'
    this._toastContent = 'Not available while driving'

    this._addEvent = this._addEvent.bind(this)
    this._addElement = this._addElement.bind(this)
    this._removeElement = this._removeElement.bind(this)
    this._onChangedLockoutStatus = this._onChangedLockoutStatus.bind(this)
    this._setLockout = this._setLockout.bind(this)
    this.setToastContent = this.setToastContent.bind(this)
    this.getDrivingFlag = this.getDrivingFlag.bind(this)
    this.getPathCollection = this.getPathCollection.bind(this)
  }

  /**
   * @ignore
   * @function _bind
   * @desc bind
   * @private
   */
  _bind () {
    if (this._binded) {
      return
    } else {
      this._binded = true
    }
    // addEvent
    if (this.appManager) {
      this._appType = (this.appManager.type === 2) ? APP_TYPE.GADGET : APP_TYPE.WIDGET
      this._lockoutStatus = this.appManager.getLockoutStatus()
      // this._addEvent()
    }
  }

  _addEvent () {
    if (this.appManager) {
      this.appManager.addEventListener('ChangedLockoutStatus', this._onChangedLockoutStatus)
    }
  }

  _addElement (el, binding, vnode) {
    let self = this
    let item = {element: el, condition: binding.modifiers, originStyle: undefined}
    let enableFlag = this.getDrivingFlag()
    let arr = this.getPathCollection()
    arr.push(item)
    this._pathMap.set(this._currentPath, arr)
    let clickEventHandler = (e) => {
      let preventEnableFlag = self.getDrivingFlag()
      if (preventEnableFlag && item.condition.disable) {
        e.preventDefault()
        e.stopPropagation()
        let title = ''
        self.appManager.requestPopup(POPUP_TYPE.TOAST_POPUP, title, self._toastContent, [])
      }
    }
    item.element.addEventListener('click', clickEventHandler, true)
    Lockout.applyLockoutMode(item, enableFlag)
  }

  _removeElement (el, binding) {
    let arr = this.getPathCollection()
    arr = arr.filter(({element}) => {
      if (!element) {
        return false
      }
      return !el.isEqualNode(element)
    })
    this._pathMap.set(this._currentPath, arr)
  }

  _onChangedLockoutStatus (status) {
    this._lockoutStatus = status
    let enableFlag = this.getDrivingFlag()
    let arr = this.getPathCollection()
    arr.forEach((item, i) => {
      if (!item.element) {
        return
      }
      Lockout.applyLockoutMode(item, enableFlag)
    })
  }

  /**
   * setting lockout cover
   * @param isShow {boolean} if to lockout
   */
  _setLockout (isShow = false) {
    let divId = 'obg-lockout'
    let lockout = document.querySelector('#' + divId)
    let hasLockout = lockout !== null && lockout !== undefined
    let self = this
    if (isShow && !hasLockout) {
      let lockoutEle = document.createElement('div')
      lockoutEle.setAttribute('id', divId)
      lockoutEle.classList.add('lockout-cover')
      lockoutEle.addEventListener('click', (e) => {
        e.preventDefault()
        e.stopPropagation()
        let title = ''
        self.appManager.requestPopup(POPUP_TYPE.TOAST_POPUP, title, self._toastContent, [])
      })
      let child = document.createElement('i')
      child.classList.add('obg-icon-drive-restriction')
      lockoutEle.append(child)
      document.body.append(lockoutEle)
    } else if (!isShow && hasLockout) {
      lockout.remove()
    }
  }

  // setPath (path) {
  //   this._currentPath = path
  // }

  /**
   * [{element, condition: {disable:true}}]
   * return element array
   * @returns {V}
   */
  getPathCollection () {
    let path = this._currentPath
    if (!this._pathMap.has(path)) {
      this._pathMap.set(path, [])
    }
    let arr = this._pathMap.get(path)
    return arr
  }

  /**
   * return if driving
   * @returns {boolean} if driving
   */
  getDrivingFlag () {
    let drivingFlag = false
    switch (this._lockoutStatus) {
      case LOCKOUT_STATUS.DRIVING:
        drivingFlag = true
        break
      case LOCKOUT_STATUS.NOT_DRIVING:
        drivingFlag = false
        break
    }
    return drivingFlag
  }

  /**
   * set toast content
   * @param content {string}
   */
  setToastContent (content) {
    if (!content) {
      return
    }
    if (typeof content !== 'string') {
      return
    }
    if (content === '') {
      return
    }
    this._toastContent = content
  }

  /**
   * lockout at gadget
   * cover by icon for lockout
   */
  show () {
    this._setLockout(true)
  }

  /**
   * dismiss lockout mode at gadget
   * remove icon of lockout
   */
  hide () {
    this._setLockout()
  }

  // changePath (path) {
  //   this.setPath(path)
  //   let enableFlag = this.getDrivingFlag()
  //   let arr = this.getPathCollection()
  //   arr.forEach((item, i) => {
  //     if (item.element === undefined) {
  //       return
  //     }
  //     Lockout.applyLockoutMode(item, enableFlag)
  //   })
  // }

  /**
   *  * @param item {object} {item, condition} object for driving restriction
   * @param enableFlag {boolean} if is driving
   */
  static applyLockoutMode (item, enableFlag) {
    const {condition} = item
    if (condition.disable) {
      Lockout.setDisable(item, enableFlag)
    } else if (condition.invisible) {
      Lockout.setInvisible(item, enableFlag)
    }
  }

  /**
   * add or remove class name 'obg-lockout-disable' to classList of element by enable param
   * @param item {object}
   * @param enable {boolean}
   */
  static setDisable (item, enable = false) {
    Lockout.setStyleByEnable(item, 'opacity: 0.5', enable)
  }

  /**
   * set style fy option enable
   * @param item {object}
   * @param enable {boolean}
   */
  static setInvisible (item, enable = false) {
    Lockout.setStyleByEnable(item, 'display: none', enable)
  }

  /**
   * set style to element by condition and driving status
   * @param item {object} {element, condition} information element
   * @param styleStr {string} string to apply style for element
   * @param enable {boolean} if on driving
   */
  static setStyleByEnable (item, styleStr, enable) {
    if (!item.element) {
      console.warn('Lockout.setStyleByEnable element undefined', item.element)
      return
    }
    let hasOriginStyle = item.originStyle !== undefined
    if (enable) {
      let element = item.element
      let currentStyle = element.getAttribute('style') || ''
      if (!hasOriginStyle) {
        item.originStyle = element.getAttribute('style') || ''
      }
      if (currentStyle === item.originStyle) {
        item.element.setAttribute('style', item.originStyle + ';' + styleStr)
      }
    } else if (!enable && hasOriginStyle) {
      item.element.setAttribute('style', item.originStyle)
      item.originStyle = undefined
    }
  }
}

export var lockoutInstance = new Lockout()

/**
 * install lockout
 * @param _Vue
 * @param options {object} {toastContent:{string}} set for toast content
 * @returns {Lockout}
 * @example
 * import {Lockout} from 'obigo-js-ui'
 *
 * let options = {toastContent: 'You can not use on driving'}
 * Vue.use(Lockout, options)
 */
export function install (_Vue, options = { toastContent: '' }) {
  lockoutInstance._bind()
  if (options && options.toastContent && options.toastContent !== '') {
    lockoutInstance.setToastContent(options.toastContent)
  }
  // _Vue.directive('lock-out', LockoutDirective)
  _Vue.prototype.$lockout = lockoutInstance
  return lockoutInstance
}
