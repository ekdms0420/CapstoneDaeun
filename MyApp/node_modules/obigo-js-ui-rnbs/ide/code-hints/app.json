{
  "!name": "Application API",
  "applicationFramework": {
    "applicationManager": {
      "!type": "ApplicationManager",
      "!doc": "Application manager object."
    }
  },
  "ApplicationManager": {
    "getOwnerApplication": {
      "!type": "fn(document: +Document) -> +Application",
      "!doc": "Return application object"
    }
  },
  "Application": {
    "!type": "fn()",
    "!doc": "Application Object.",
    "prototype": {
      "visible": {
        "!type": "bool",
        "!url": "",
        "!doc": "status of application's visible."
      },
      "active": {
        "!type": "bool",
        "!url": "",
        "!doc": "status of application's active/inactive."
      },
      "permissions": {
        "!type": "StringCollection",
        "!url": "",
        "!doc": "StringCollection object containing the names of the permissions granted to this application."
      },
      "isPrimaryReceiver": {
        "!type": "bool",
        "!url": "",
        "!doc": "if ture, application receive user event at top most"
      },
      "privateData": {
        "!type": "ApplicationPrivateData",
        "!url": "",
        "!doc": "Details of application include private data"
      },
      "type": {
        "!type": "number",
        "!url": "",
        "!doc": "Application type.\nif 1, widget.\nif 2, gadget.\nif 3, service application."
      },
      "show": {
        "!type": "fn()",
        "!url": "",
        "!doc": "show application."
      },
      "hide": {
        "!type": "fn()",
        "!url": "",
        "!doc": "hide application."
      },
      "createApplication": {
        "!type": "fn(uri: string, createChild: bool) -> +Application",
        "!url": "",
        "!doc": "Create new application as async. if create finish, fire ApplicationLoaded event. return null if cannot create application."
      },
      "startWidget": {
        "!type": "fn(wd: +WidgetDescriptor, createChild: bool) -> +Application",
        "!url": "",
        "!doc": "Same as createApplication function."
      },
      "getDescriptor": {
        "!type": "fn() -> +WidgetDescriptor",
        "!url": "",
        "!doc": "WidgetDescriptor of application."
      },
      "home": {
        "!type": "fn()",
        "!url": "",
        "!doc": "Go to native home screen."
      },
      "main": {
        "!type": "fn()",
        "!url": "",
        "!doc": "Go to web launcher home screen."
      },
      "back": {
        "!type": "fn()",
        "!url": "",
        "!doc": "Go to back application."
      },
      "destroyApplication": {
        "!type": "fn()",
        "!url": "",
        "!doc": "destroy application and remove from application tree and deallocate resource. if exist child application, destroy child application too. window also removed."
      },
      "destroyApplication": {
        "!type": "fn()",
        "!url": "",
        "!doc": "destroy application and remove from application tree and deallocate resource. if exist child application, destroy child application too. window also removed."
      },
      "onServiceConnected": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when connect to service type application."
      },
      "onServiceDisconnected": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when disconnect to service type application."
      },
      "onApplicationActivated": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application get focus."
      },
      "onApplicationDeactivated": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application lose focus."
      },
      "onApplicationShown": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application show."
      },
      "onApplicationHidden": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application hide."
      },
      "onApplicationPrimaryReceiver": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application is located in top of active application list."
      },
      "onApplicationNotPrimaryReceiver": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application is removed in top of active application list."
      },
      "onApplicationTopmost": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application shown in top layer."
      },
      "onApplicationNotTopmost": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application not shown in top layer."
      },
      "onApplicationDestroyRequest": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application is request destroy by external behavior."
      },
      "registerMessageListener": {
        "!type": "fn(filterName: string)",
        "!url": "",
        "!doc": "Register filter name to receive message from postMessage function."
      },
      "unregisterMessageListener": {
        "!type": "fn(filterName: string)",
        "!url": "",
        "!doc": "Unregister filter name to receive message from postMessage function."
      },
      "postMessage": {
        "!type": "fn(message: string, targetOrigin: string)",
        "!url": "",
        "!doc": "Send message to other applications."
      },
      "onApplicationMessage": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when application receive message from postMessage."
      },
      "requestPopup": {
        "!type": "fn(type: number, title: string, buttons: [string])",
        "!url": "",
        "!doc": "Request popup open to native."
      },
      "isPopupActive": {
        "!type": "fn() -> bool",
        "!url": "",
        "!doc": "Return native popup open status."
      },
      "onPopupButtonReleased": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when native popup button is pressed."
      },
      "requestNativeScreen": {
        "!type": "fn(type: number)",
        "!url": "",
        "!doc": "Open native screen."
      },
      "getAmbientColor": {
        "!type": "fn() -> string",
        "!url": "",
        "!doc": "Return ambient color."
      },
      "getLanguage": {
        "!type": "fn() -> string",
        "!url": "",
        "!doc": "Return system set language."
      },
      "getStatusBarTitle": {
        "!type": "fn() -> string",
        "!url": "",
        "!doc": "Return title text."
      },
      "setStatusBarTitle": {
        "!type": "fn(title: string)",
        "!url": "",
        "!doc": "Set title text."
      },
      "onAmbientColorChanged": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when ambient color is changed."
      },
      "onLanguageChanged": {
        "!type": "?",
        "!url": "",
        "!doc": "Fired event when system language is changed."
      },
      "getCommonLibraryPath": {
        "!type": "fn() -> string",
        "!url": "",
        "!doc": "Return common resource path."
      },
      "getDeviceModel": {
        "!type": "fn() -> string",
        "!url": "",
        "!doc": "Return device model."
      },
      "APPLICATION_TYPE_WIDGET": "number",
      "APPLICATION_TYPE_GADGET": "number",
      "APPLICATION_TYPE_SERVICE": "number",
      "SERVICE_CONNECTION_SUCCEED": "number",
      "SERVICE_CONNECTION_FAILED": "number",
      "SERVICE_ERROR_NONE": "number",
      "SERVICE_ERROR_INVALID_SERVICE_ID": "number",
      "SERVICE_ERROR_EXPIRED": "number",
      "SERVICE_ERROR_CRASHED": "number"
    }
  },
  "StringCollection": {
    "!doc": "String collections.",
    "items": {
      "!type": "fn(index: number) -> string",
      "!url": "",
      "!doc": "String collection."
    },
    "length": {
      "!type": "number",
      "!url": "",
      "!doc": "Length of collection."
    }
  },
  "WidgetDescriptor": {
    "!doc": "Widget descriptor object.",
    "prototype": {
    }
  },
  "ApplicationPrivateData": {
    "!doc": "Application private data object."
  }
}
